openapi: 3.0.0

info:
    title: Graveboards API
    description: A webapp backend for hosting leaderboards for graveyarded osu! beatmaps.
    version: 1.0.0

servers:
    - url: /api/v1

components:
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            in: header
            name: X-API-KEY
            x-apikeyInfoFunc: api.auth.api_key_info

        BearerAuth:
            type: http
            scheme: bearer
            x-bearerInfoFunc: api.auth.bearer_info

    schemas:
        AuthorizationCodeQuery:
            description: A form object containing an osu! OAuth Authorization Code
            type: object
            properties:
                code:
                    type: string
            required:
                - code

        UserQuery:
            description: A JSON object containing an osu! user ID
            type: object
            properties:
                user_id:
                    type: integer
            required:
                - user_id

        BeatmapQuery:
            description: A JSON object containing a beatmap ID
            type: object
            properties:
                beatmap_id:
                    type: integer
            required:
                - beatmap_id

        BeatmapsetQuery:
            description: A JSON object containing a beatmapset ID
            type: object
            properties:
                beatmapset_id:
                    type: integer
            required:
                - beatmapset_id

        LeaderboardQuery:
            description: A JSON object containing a beatmap ID and snapshot number. Defaults to latest snapshot if no snapshot number specified
            type: object
            properties:
                beatmap_id:
                    type: integer
                snapshot_number:
                    type: integer
            required:
                - beatmap_id

        Mods:
            description: A JSON array containing mod strings
            type: array
            items:
                type: string

        Statistics:
            description: A JSON object containing score statistics
            type: object
            properties:
                count_100:
                    type: integer
                count_300:
                    type: integer
                count_50:
                    type: integer
                count_geki:
                    type: integer
                count_katsu:
                    type: integer
                count_miss:
                    type: integer

        Score:
            description: A JSON object containing score data
            type: object
            properties:
                accuracy:
                    type: number
                    format: float
                created_at:
                    type: string
                    format: date-time
                max_combo:
                    type: integer
                mode:
                    type: string
                mode_int:
                    type: integer
                mods:
                    $ref: "#/components/schemas/Mods"
                perfect:
                    type: boolean
                pp:
                    type: number
                    format: float
                    nullable: true
                rank:
                    type: string
                score:
                    type: integer
                statistics:
                    $ref: "#/components/schemas/Statistics"
                type:
                    type: string
                user_id:
                    type: integer
                beatmap:
                    $ref: "#/components/schemas/Beatmap"

        Beatmap:
            description: A JSON object containing beatmap data
            type: object
            properties:
                beatmapset_id:
                    type: integer
                difficulty_rating:
                    type: number
                    format: float
                id:
                    type: integer
                mode:
                    type: string
                mode_int:
                    type: integer
                status:
                    type: string
                total_length:
                    type: integer
                user_id:
                    type: integer
                version:
                    type: string
                accuracy:
                    type: number
                    format: float
                ar:
                    type: number
                    format: float
                bpm:
                    type: number
                    format: float
                convert:
                    type: boolean
                count_circles:
                    type: integer
                count_sliders:
                    type: integer
                count_spinners:
                    type: integer
                cs:
                    type: number
                    format: float
                deleted_at:
                    type: string
                    format: date-time
                    nullable: true
                drain:
                    type: number
                    format: float
                hit_length:
                    type: integer
                is_scoreable:
                    type: boolean
                last_updated:
                    type: string
                    format: date-time
                passcount:
                    type: integer
                playcount:
                    type: integer
                ranked:
                    type: integer
                url:
                    type: string
                    format: uri
                checksum:
                    type: string
                    pattern: "^[0-9a-fA-F]{32}$"

        Queue:
            description: A JSON object containing queue data
            type: object
            properties:
                user_id:
                    type: integer
                name:
                    type: string
                description:
                    type: string
                visibility:
                    type: integer
                    enum:
                        - 0 # Public
                        - 1 # Unlisted
                        - 2 # Private
            required:
                - user_id
                - name

        Request:
            description: A JSON object containing request data
            type: object
            properties:
                beatmapset_id:
                    type: integer
                comment:
                    type: string
                mv_checked:
                    type: boolean
                user_id:
                    type: integer
                queue_id:
                    type: integer
            required:
                - beatmapset_id
                - user_id
                - queue_id

        QueuePatch:
            description: A JSON object containing queue data to update
            type: object
            properties:
                name:
                    type: string
                description:
                    type: string
                is_open:
                    type: boolean
                visibility:
                    type: integer
                    enum:
                        - 0 # Public
                        - 1 # Unlisted
                        - 2 # Private

        RequestPatch:
            description: A JSON object containing request data to update
            type: object
            properties:
                status:
                    type: integer
                    enum:
                        - -1 # Rejected
                        - 0 # Undetermined
                        - 1 # Accepted

        Sorting:
            description: Array of enums of models and their fields to sort search results by
            type: array
            items:
                type: string
                enum:
                    - Profile.country_code
                    - Profile.graveyard_beatmapset_count
                    - Profile.loved_beatmapset_count
                    - Profile.pending_beatmapset_count
                    - Profile.ranked_beatmapset_count
                    - Profile.total_maps
                    - Profile.total_kudosu
                    - BeatmapSnapshot.beatmap_id
                    - BeatmapSnapshot.user_id
                    - BeatmapSnapshot.difficulty_rating
                    - BeatmapSnapshot.mode
                    - BeatmapSnapshot.total_length
                    - BeatmapSnapshot.version
                    - BeatmapSnapshot.accuracy
                    - BeatmapSnapshot.ar
                    - BeatmapSnapshot.bpm
                    - BeatmapSnapshot.count_circles
                    - BeatmapSnapshot.count_sliders
                    - BeatmapSnapshot.count_spinners
                    - BeatmapSnapshot.cs
                    - BeatmapSnapshot.drain
                    - BeatmapSnapshot.last_updated
                    - BeatmapSnapshot.passcount
                    - BeatmapSnapshot.playcount
                    - BeatmapsetSnapshot.beatmapset_id
                    - BeatmapsetSnapshot.user_id
                    - BeatmapsetSnapshot.artist
                    - BeatmapsetSnapshot.artist_unicode
                    - BeatmapsetSnapshot.creator
                    - BeatmapsetSnapshot.favourite_count
                    - BeatmapsetSnapshot.offset
                    - BeatmapsetSnapshot.play_count
                    - BeatmapsetSnapshot.source
                    - BeatmapsetSnapshot.status
                    - BeatmapsetSnapshot.title
                    - BeatmapsetSnapshot.title_unicode
                    - BeatmapsetSnapshot.track_id
                    - BeatmapsetSnapshot.num_difficulties
                    - BeatmapsetSnapshot.sr_gaps.min
                    - BeatmapsetSnapshot.sr_gaps.max
                    - BeatmapsetSnapshot.sr_gaps.avg
                    - Request.comment
                    - Request.mv_checked
                    - Request.created_at
                    - Request.updated_at
                    - Request.status

        SortOrder:
            description: Array of sort order enums to map respectively to the Sorting array if supplied
            type: array
            items:
                type: string
                enum:
                    - asc
                    - desc

    parameters:
        UserId:
            name: user_id
            description: osu! user ID
            in: path
            required: true
            schema:
                type: integer

        BeatmapId:
            name: beatmap_id
            description: osu! beatmap ID
            in: path
            required: true
            schema:
                type: integer

        BeatmapsetId:
            name: beatmapset_id
            description: osu! beatmapset ID
            in: path
            required: true
            schema:
                type: integer

        SnapshotNumber:
            name: snapshot_number
            description: osu! beatmap snapshot number
            in: path
            required: true
            schema:
                type: integer

        UserIdQuery:
            name: user_id
            description: osu! user ID
            in: query
            schema:
                type: integer

        BeatmapIdQuery:
            name: beatmap_id
            description: osu! beatmap ID
            in: query
            schema:
                type: integer

        BeatmapsetIdQuery:
            name: beatmapset_id
            description: osu! beatmapset ID
            in: query
            schema:
                type: integer

        ScoreFilter:
            name: score_filter
            description: Semicolon-separated string of filters to apply to the query. Supports relational operators (=, >, <, >=, <=, and !=)
            in: query
            schema:
                type: string
            example: 'user_id=124493;pp!=727;accuracy>=99.09;mods=["HD","HR"];created_at<"2017-04-13T23:55:30Z"'

        ScoreAccuracy:
            name: accuracy
            description: Accuracy of the score
            in: query
            schema:
                type: number
                format: float

        ScoreCreatedAt:
            name: created_at
            description: Timestamp string in datetime format
            in: query
            schema:
                type: string
                format: date-time

        ScoreMaxCombo:
            name: max_combo
            description: Max combo of the score
            in: query
            schema:
                type: integer

        ScoreMode:
            name: mode
            description: Mode the score was played in
            in: query
            schema:
                type: string

        ScoreModeInt:
            name: mode_int
            description: Mode the score was played in (integer version)
            in: query
            schema:
                type: integer

        ScoreMods:
            name: mods
            description: List of mods. Supports full names and abbreviations (Hard Rock/HR)
            in: query
            schema:
                $ref: "#/components/schemas/Mods"

        ScorePerfect:
            name: perfect
            description: Whether or not the score is a true full combo
            in: query
            schema:
                type: boolean

        ScorePP:
            name: pp
            description: pp value of the score
            in: query
            schema:
                type: number
                format: float

        ScoreRank:
            name: rank
            description: Letter rank of the score
            in: query
            schema:
                type: string

        ScoreScore:
            name: score
            description: Score value of the score
            in: query
            schema:
                type: integer

        ScoreCount100:
            name: count_300
            description: 300 count in the score
            in: query
            schema:
                type: integer

        ScoreCount300:
            name: count_100
            description: 100 count in the score
            in: query
            schema:
                type: integer

        ScoreCount50:
            name: count_50
            description: 50 count in the score
            in: query
            schema:
                type: integer

        ScoreCountGeki:
            name: count_geki
            description: Geki count in the score
            in: query
            schema:
                type: integer

        ScoreCountKatsu:
            name: count_katsu
            description: Katsu count in the score
            in: query
            schema:
                type: integer

        ScoreCountMiss:
            name: count_miss
            description: Miss count in the score
            in: query
            schema:
                type: integer

        ScoreType:
            name: type
            description: Type string of the score
            in: query
            schema:
                type: string

        Limit:
            name: limit
            description: Number of items to limit in the response for pagination
            in: query
            schema:
                type: integer
                minimum: 1
                maximum: 100
            example: 50

        Offset:
            name: offset
            description: Offset of limited items in the response for pagination
            in: query
            schema:
                type: integer
                minimum: 0
            example: 0

        QueueId:
            name: queue_id
            description: Queue ID
            in: path
            required: true
            schema:
                type: integer

        RequestId:
            name: request_id
            description: Request ID
            in: path
            required: true
            schema:
                type: integer

        SearchQuery:
            name: search_query
            description: Search terms to apply to the query
            in: query
            schema:
                type: string

        Sorting:
            name: sorting
            description: Fields to sort the search results by
            in: query
            schema:
                $ref: "#/components/schemas/Sorting"

        SortOrder:
            name: sort_orders
            description: How to order the sorting of the search results by
            in: query
            schema:
                $ref: "#/components/schemas/SortOrder"

        MapperFilter:
            name: mapper_filter
            description: Json string of filters to apply to the query. Supports relational operators (eq, gt, lt, gte, lte, and neq)
            in: query
            schema:
                type: string
            example: '{"ranked_beatmapset_count": {"eq": 1}, "total_kudosu": {"gt": 10}, "total_maps": {"gte": 10, "lte": 100}}'

        BeatmapFilter:
            name: beatmap_filter
            description: Json string of filters to apply to the query. Supports relational operators (eq, gt, lt, gte, lte, and neq)
            in: query
            schema:
                type: string
            example: '{"bpm": {"lte": 200}, "ar": {"gt": 8, "lt": 10}, "cs": {"eq": 4}}'

        BeatmapsetFilter:
            name: beatmapset_filter
            description: Json string of filters to apply to the query. Supports relational operators (eq, gt, lt, gte, lte, and neq)
            in: query
            schema:
                type: string
            example: '{"num_difficulties": {"lt": 7}, "sr_gaps": {"min": {"gt": 0.5, "lt": 1.5}}, "play_count": {"gt": 100}}'

        RequestFilter:
            name: request_filter
            description: Json string of filters to apply to the query. Supports relational operators (eq, gt, lt, gte, lte, and neq)
            in: query
            schema:
                type: string
            example: '{"user_id": {"eq": 1047883}, "status": {"eq": 0}}'

        SearchQueueId:
            name: queue_id
            description: Only include maps requested in the specified queue
            in: query
            schema:
                type: integer

        JWT:
            name: token
            description: JWT issued to a user
            in: query
            schema:
                type: string

        TaskId:
            name: task_id
            description: Task ID
            in: path
            required: true
            schema:
                type: integer


    requestBodies:
        AuthorizationCode:
            description: Authorization Code received from the osu! OAuth flow to authenticate with
            required: true
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: "#/components/schemas/AuthorizationCodeQuery"

        User:
            description: User to add
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/UserQuery"

        Beatmapset:
            description: Beatmapset to download to the server
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/BeatmapsetQuery"

        Leaderboard:
            description: Leaderboard to add to a beatmap
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/LeaderboardQuery"

        Score:
            description: Score to add to a leaderboard
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Score"

        Queue:
            description: Queue to add
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Queue"

        Request:
            description: Request to add to the queue
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Request"

        QueuePatch:
            description: Queue data to update
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/QueuePatch"

        RequestPatch:
            description: Request data to update
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/RequestPatch"

    responses:
        UnauthorizedError:
            description: X-API-KEY or Authorization is missing in the header or invalid
            headers:
                WWW-Authenticate:
                    schema:
                        type: string

        AuthenticationSuccess:
            description: Successfully authenticated user
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            token:
                                type: string
                            user_id:
                                type: integer

paths:
    /login:
        get:
            summary: Begins the OAuth 2.0 flow
            tags:
                - OAuth
            responses:
                200:
                    description: Generated authorization URL

    /token:
        get:
            summary: Retrieve info for a JWT
            tags:
                - OAuth
            parameters:
                - $ref: "#/components/parameters/JWT"
                  required: true
            responses:
                200:
                    description: Retrieved token info
                400:
                    description: Must provide token in the query parameters
                404:
                    description: Token not found

        post:
            summary: Uses the Authorization Code from the osu! OAuth flow to authenticate a user and issues a JWT
            tags:
                - OAuth
            requestBody:
                $ref: "#/components/requestBodies/AuthorizationCode"
            responses:
                201:
                    $ref: "#/components/responses/AuthenticationSuccess"

    /users:
        get:
            summary: Returns a list of users
            tags:
                - Users
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved all users
                401:
                    $ref: "#/components/responses/UnauthorizedError"

        post:
            summary: Adds a user
            tags:
                - Users
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/User"
            responses:
                201:
                    description: Successfully added user

    /users/{user_id}:
        get:
            summary: Returns the user
            tags:
                - Users
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/UserId"
            responses:
                200:
                    description: Successfully retrieved user

    /profiles:
        get:
            summary: Returns a list of profiles
            tags:
                - Profiles
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved all profiles
                401:
                    $ref: "#/components/responses/UnauthorizedError"

    /profiles/{user_id}:
        get:
            summary: Returns the profile for the specified user ID
            tags:
                - Profiles
            parameters:
                - $ref: "#/components/parameters/UserId"
            responses:
                200:
                    description: Successfully retrieved user profile

    /beatmaps:
        get:
            summary: Returns a list of beatmaps stored on the server
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved beatmaps

    /beatmaps/{beatmap_id}/snapshots:
        get:
            summary: Returns a list of the beatmap's snapshots
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved beatmap snapshots

    /beatmaps/{beatmap_id}/snapshots/{snapshot_number}:
        get:
            summary: Returns the beatmap's specified snapshot
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/SnapshotNumber"
            responses:
                200:
                    description: Successfully retrieved beatmap snapshot

    /beatmaps/{beatmap_id}/snapshots/{snapshot_number}/osu:
        get:
            summary: Returns the .osu file of the beatmap's specified snapshot
            tags:
                - Beatmaps
            parameters:
                -   $ref: "#/components/parameters/BeatmapId"
                -   $ref: "#/components/parameters/SnapshotNumber"
            responses:
                200:
                    description: Successfully retrieved beatmap file

    /beatmapsets:
        get:
            summary: Returns a list of beatmapsets
            tags:
                - Beatmapsets
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved beatmapsets

        post:
            summary: Downloads all beatmaps in a beatmapset to the server
            tags:
                - Beatmapsets
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Beatmapset"
            responses:
                200:
                    description: All of the latest snapshots of the beatmaps in the beatmapset have already been downloaded
                201:
                    description: Successfully downloaded entire beatmapset to the server

    /beatmapsets/{beatmapset_id}/snapshots:
        get:
            summary: Returns a list of the beatmapset's snapshots
            tags:
                - Beatmapsets
            parameters:
                - $ref: "#/components/parameters/BeatmapsetId"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved beatmapset snapshots

    /beatmapsets/{beatmapset_id}/snapshots/{snapshot_number}:
        get:
            summary: Returns the beatmapset's specified snapshot
            tags:
                - Beatmapsets
            parameters:
                - $ref: "#/components/parameters/BeatmapsetId"
                - $ref: "#/components/parameters/SnapshotNumber"
            responses:
                200:
                    description: Successfully retrieved beatmapset snapshot

    /beatmapsets/{beatmapset_id}/snapshots/{snapshot_number}/zip:
        get:
            summary: Returns a .zip of the .osu files of the beatmapset's specified snapshot
            tags:
                - Beatmapsets
            parameters:
                - $ref: "#/components/parameters/BeatmapsetId"
                - $ref: "#/components/parameters/SnapshotNumber"
            responses:
                200:
                    description: Successfully retrieved zipped beatmap files

    /beatmapsets/listings:
        get:
            summary: Returns a filterable and sortable list of beatmapset data for the frontend
            tags:
                - Beatmapsets
            parameters:
                - $ref: "#/components/parameters/SearchQuery"
                - $ref: "#/components/parameters/Sorting"
                - $ref: "#/components/parameters/SortOrder"
                - $ref: "#/components/parameters/MapperFilter"
                - $ref: "#/components/parameters/BeatmapFilter"
                - $ref: "#/components/parameters/BeatmapsetFilter"
                - $ref: "#/components/parameters/RequestFilter"
                - $ref: "#/components/parameters/SearchQueueId"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved beatmapset listings

    /leaderboards:
        get:
            summary: Returns a list of leaderboards
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved leaderboards

        post:
            summary: Adds a leaderboard for a beatmap
            tags:
                - Leaderboards
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Leaderboard"
            responses:
                201:
                    description: Successfully added leaderboard

    /leaderboards/{beatmap_id}:
        get:
            summary: Returns the leaderboard of the beatmap's latest snapshot
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved leaderboard

    /leaderboards/{beatmap_id}/snapshots:
        get:
            summary: Returns a list of the beatmap's leaderboard snapshots
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved leaderboard snapshots

    /leaderboards/{beatmap_id}/snapshots/{snapshot_number}:
        get:
            summary: Returns the leaderboard of the beatmap's specified snapshot
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/SnapshotNumber"
            responses:
                200:
                    description: Successfully retrieved leaderboard

    /scores:
        get:
            summary: Returns a filterable list of scores
            tags:
                - Scores
            parameters:
                - $ref: "#/components/parameters/ScoreFilter"
                - $ref: "#/components/parameters/UserIdQuery"
                - $ref: "#/components/parameters/BeatmapIdQuery"
                - $ref: "#/components/parameters/BeatmapsetIdQuery"
                - $ref: "#/components/parameters/ScoreAccuracy"
                - $ref: "#/components/parameters/ScoreCreatedAt"
                - $ref: "#/components/parameters/ScoreMaxCombo"
                - $ref: "#/components/parameters/ScoreMode"
                - $ref: "#/components/parameters/ScoreModeInt"
                - $ref: "#/components/parameters/ScoreMods"
                - $ref: "#/components/parameters/ScorePerfect"
                - $ref: "#/components/parameters/ScorePP"
                - $ref: "#/components/parameters/ScoreRank"
                - $ref: "#/components/parameters/ScoreScore"
                - $ref: "#/components/parameters/ScoreCount300"
                - $ref: "#/components/parameters/ScoreCount100"
                - $ref: "#/components/parameters/ScoreCount50"
                - $ref: "#/components/parameters/ScoreCountGeki"
                - $ref: "#/components/parameters/ScoreCountKatsu"
                - $ref: "#/components/parameters/ScoreCountMiss"
                - $ref: "#/components/parameters/ScoreType"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved scores

        post:
            summary: Adds a score to the latest snapshot of the appropriate beatmap's leaderboard
            tags:
                - Scores
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Score"
            responses:
                201:
                    description: Successfully added score

    /queues:
        get:
            summary: Returns a list of queues
            tags:
                - Queues
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved queues

        post:
            summary: Adds a queue
            tags:
                - Queues
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Queue"
            responses:
                201:
                    description: Successfully added queue

    /queues/{queue_id}:
        get:
            summary: Returns the specified queue
            tags:
                - Queues
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/QueueId"
            responses:
                200:
                    description: Successfully retrieved queue

        patch:
            summary: Updates a queue
            tags:
                - Queues
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/QueueId"
            requestBody:
                $ref: "#/components/requestBodies/QueuePatch"
            responses:
                200:
                    description: Successfully updated queue

    /requests:
        get:
            summary: Returns a list of map requests
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/RequestFilter"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved requests

        post:
            summary: Adds a map request to the queue
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Request"
            responses:
                201:
                    description: Successfully added request

    /requests/{request_id}:
        get:
            summary: Returns the specified request
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/RequestId"
            responses:
                200:
                    description: Successfully retrieved request

        patch:
            summary: Updates a request
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/RequestId"
            requestBody:
                $ref: "#/components/requestBodies/RequestPatch"
            responses:
                200:
                    description: Successfully updated request

    /requests/listings:
        get:
            summary: Returns a filterable and sortable list of request data for the frontend
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/SearchQuery"
                - $ref: "#/components/parameters/Sorting"
                - $ref: "#/components/parameters/SortOrder"
                - $ref: "#/components/parameters/MapperFilter"
                - $ref: "#/components/parameters/BeatmapFilter"
                - $ref: "#/components/parameters/BeatmapsetFilter"
                - $ref: "#/components/parameters/RequestFilter"
                - $ref: "#/components/parameters/SearchQueueId"
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved request listings

    /requests/tasks:
        get:
            summary: Returns a list of request tasks
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/Limit"
                - $ref: "#/components/parameters/Offset"
            responses:
                200:
                    description: Successfully retrieved tasks

    /requests/tasks/{task_id}:
        get:
            summary: Returns the specified task
            tags:
                - Requests
            security:
                - BearerAuth: []
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/TaskId"
            responses:
                200:
                    description: Successfully retrieved task