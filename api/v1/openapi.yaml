openapi: 3.0.0

info:
    title: Test App
    description: Test API
    version: 1.0.0

servers:
    - url: /api/v1

components:
    securitySchemes:
        ApiKeyAuth:
            type: apiKey
            in: header
            name: X-API-KEY
            x-apikeyInfoFunc: app.auth.api_key_info

    schemas:
        AuthorizationCodeQuery:
            description: A form object containing an osu! OAuth Authorization Code
            type: object
            properties:
                code:
                    type: string
            required:
                - code

        UserQuery:
            description: A JSON object containing an osu! user ID
            type: object
            properties:
                user_id:
                    type: integer
            required:
                - user_id

        BeatmapQuery:
            description: A JSON object containing a beatmap ID
            type: object
            properties:
                beatmap_id:
                    type: integer
            required:
                - beatmap_id

        LeaderboardQuery:
            description: A JSON object containing a beatmap ID and version number. Defaults to latest version if no version number specified
            type: object
            properties:
                beatmap_id:
                    type: integer
                version_number:
                    type: integer
            required:
                - beatmap_id

        Mods:
            description: A JSON array containing mod strings
            type: array
            items:
                type: string

        Statistics:
            description: A JSON object containing score statistics
            type: object
            properties:
                count_100:
                    type: integer
                count_300:
                    type: integer
                count_50:
                    type: integer
                count_geki:
                    type: integer
                count_katsu:
                    type: integer
                count_miss:
                    type: integer

        Score:
            description: A JSON object containing score data
            type: object
            properties:
                accuracy:
                    type: number
                    format: float
                created_at:
                    type: string
                    format: date-time
                max_combo:
                    type: integer
                mode:
                    type: string
                mode_int:
                    type: integer
                mods:
                    $ref: "#/components/schemas/Mods"
                perfect:
                    type: boolean
                pp:
                    type: number
                    format: float
                    nullable: true
                rank:
                    type: string
                score:
                    type: integer
                statistics:
                    $ref: "#/components/schemas/Statistics"
                type:
                    type: string
                user_id:
                    type: integer
                beatmap:
                    $ref: "#/components/schemas/Beatmap"

        Beatmap:
            description: A JSON object containing beatmap data
            type: object
            properties:
                beatmapset_id:
                    type: integer
                difficulty_rating:
                    type: number
                    format: float
                id:
                    type: integer
                mode:
                    type: string
                mode_int:
                    type: integer
                status:
                    type: string
                total_length:
                    type: integer
                user_id:
                    type: integer
                version:
                    type: string
                accuracy:
                    type: number
                    format: float
                ar:
                    type: number
                    format: float
                bpm:
                    type: number
                    format: float
                convert:
                    type: boolean
                count_circles:
                    type: integer
                count_sliders:
                    type: integer
                count_spinners:
                    type: integer
                cs:
                    type: number
                    format: float
                deleted_at:
                    type: string
                    format: date-time
                    nullable: true
                drain:
                    type: number
                    format: float
                hit_length:
                    type: integer
                is_scoreable:
                    type: boolean
                last_updated:
                    type: string
                    format: date-time
                passcount:
                    type: integer
                playcount:
                    type: integer
                ranked:
                    type: integer
                url:
                    type: string
                    format: uri
                checksum:
                    type: string
                    pattern: "^[0-9a-fA-F]{32}$"


    parameters:
        UserId:
            name: user_id
            description: osu! user ID
            in: path
            required: true
            schema:
                type: integer

        BeatmapId:
            name: beatmap_id
            description: osu! beatmap ID
            in: path
            required: true
            schema:
                type: integer

        BeatmapsetId:
            name: beatmapset_id
            description: osu! beatmapset ID
            in: path
            required: true
            schema:
                type: integer

        VersionNumber:
            name: version_number
            description: osu! beatmap version number
            in: path
            required: true
            schema:
                type: integer

        Filter:
            name: filter
            description: Semicolon-separated string of filters to apply to the query. Supports relational operators (=, >, <, >=, <=, and !=)
            in: query
            schema:
                type: string
            example: 'user_id=124493;pp!=727;accuracy>=99.09;mods=["HD","HR"];created_at<"2017-04-13T23:55:30Z"'

        UserIdQuery:
            name: user_id
            description: osu! user ID
            in: query
            schema:
                type: integer

        BeatmapIdQuery:
            name: beatmap_id
            description: osu! beatmap ID
            in: query
            schema:
                type: integer

        BeatmapsetIdQuery:
            name: beatmapset_id
            description: osu! beatmapset ID
            in: query
            schema:
                type: integer

        Accuracy:
            name: accuracy
            description: Accuracy of the score
            in: query
            schema:
                type: number
                format: float

        CreatedAt:
            name: created_at
            description: Timestamp string in datetime format
            in: query
            schema:
                type: string
                format: date-time

        MaxCombo:
            name: max_combo
            description: Max combo of the score
            in: query
            schema:
                type: integer

        Mode:
            name: mode
            description: Mode the score was played in
            in: query
            schema:
                type: string

        ModeInt:
            name: mode_int
            description: Mode the score was played in (integer version)
            in: query
            schema:
                type: integer

        Mods:
            name: mods
            description: List of mods. Supports full names and abbreviations (Hard Rock/HR)
            in: query
            schema:
                $ref: "#/components/schemas/Mods"

        Perfect:
            name: perfect
            description: Whether or not the score is a true full combo
            in: query
            schema:
                type: boolean

        PP:
            name: pp
            description: pp value of the score
            in: query
            schema:
                type: number
                format: float

        Rank:
            name: rank
            description: Letter rank of the score
            in: query
            schema:
                type: string

        Score:
            name: score
            description: Score value of the score
            in: query
            schema:
                type: integer

        Count100:
            name: count_300
            description: 300 count in the score
            in: query
            schema:
                type: integer

        Count300:
            name: count_100
            description: 100 count in the score
            in: query
            schema:
                type: integer

        Count50:
            name: count_50
            description: 50 count in the score
            in: query
            schema:
                type: integer

        CountGeki:
            name: count_geki
            description: Geki count in the score
            in: query
            schema:
                type: integer

        CountKatsu:
            name: count_katsu
            description: Katsu count in the score
            in: query
            schema:
                type: integer

        CountMiss:
            name: count_miss
            description: Miss count in the score
            in: query
            schema:
                type: integer

        Type:
            name: type
            description: Type string of the score
            in: query
            schema:
                type: string

    requestBodies:
        AuthorizationCode:
            description: Authorization Code received from the osu! OAuth flow to authenticate with
            required: true
            content:
                application/x-www-form-urlencoded:
                    schema:
                        $ref: "#/components/schemas/AuthorizationCodeQuery"

        User:
            description: User to add
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/UserQuery"

        Beatmap:
            description: Beatmap to download to the server
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/BeatmapQuery"

        Leaderboard:
            description: Leaderboard to add to a beatmap
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/LeaderboardQuery"

        Score:
            description: Score to add to a leaderboard
            required: true
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Score"

    responses:
        UnauthorizedError:
            description: X-API-KEY is missing in the header or invalid
            headers:
                WWW-Authenticate:
                    schema:
                        type: string

paths:
    /login:
        get:
            summary: Begins the OAuth 2.0 flow
            tags:
                - OAuth
            responses:
                302:
                    description: Redirecting back to frontend

    /token:
        post:
            summary: Uses the Authorization Code from the osu! OAuth flow to authenticate a user
            tags:
                - OAuth
            security:
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/AuthorizationCode"
            responses:
                201:
                    description: Successfully authenticated user

    /users:
        get:
            summary: Returns a list of users
            tags:
                - Users
            security:
                - ApiKeyAuth: []
            responses:
                200:
                    description: Successfully retrieved all users
                401:
                    $ref: "#/components/responses/UnauthorizedError"

        post:
            summary: Adds a user
            tags:
                - Users
            security:
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/User"
            responses:
                201:
                    description: Successfully added user

    /beatmaps:
        get:
            summary: Returns a list of beatmaps stored on the server
            tags:
                - Beatmaps
            responses:
                200:
                    description: Successfully retrieved beatmaps

        post:
            summary: Downloads a new beatmap to the server
            tags:
                - Beatmaps
            security:
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Beatmap"
            responses:
                201:
                    description: Successfully downloaded beatmap to the server

    /beatmaps/{beatmap_id}:
        get:
            summary: Returns the metadata of the beatmap
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved beatmap metadata

    /beatmaps/{beatmap_id}/versions:
        get:
            summary: Returns a list of the beatmap's version IDs
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved beatmap versions

    /beatmaps/{beatmap_id}/versions/{version_number}:
        get:
            summary: Returns the .osu file of the beatmap's specified version
            tags:
                - Beatmaps
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/VersionNumber"
            responses:
                200:
                    description: Successfully retrieved beatmap file

    /beatmaps/{beatmap_id}/difficulty:
        get:
            summary: Calculates and returns the difficulty values of the beatmap's latest version
            tags:
                - Beatmaps
            parameters:
                -   $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved beatmap difficulty values

    /beatmaps/{beatmap_id}/difficulty/{version_number}:
        get:
            summary: Calculates and returns the difficulty values of the beatmap's specified version
            tags:
                - Beatmaps
            parameters:
                -   $ref: "#/components/parameters/BeatmapId"
                -   $ref: "#/components/parameters/VersionNumber"
            responses:
                200:
                    description: Successfully retrieved beatmap difficulty values

    /leaderboards:
        get:
            summary: Returns a list of leaderboards
            tags:
                - Leaderboards
            responses:
                200:
                    description: Successfully retrieved leaderboards

        post:
            summary: Adds a leaderboard for a beatmap
            tags:
                - Leaderboards
            security:
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Leaderboard"
            responses:
                201:
                    description: Successfully added leaderboard

    /leaderboards/{beatmap_id}:
        get:
            summary: Returns the leaderboard of the beatmap's latest version
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved leaderboard

    /leaderboards/{beatmap_id}/versions:
        get:
            summary: Returns a list of the beatmap's leaderboard versions
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
            responses:
                200:
                    description: Successfully retrieved leaderboard versions

    /leaderboards/{beatmap_id}/versions/{version_number}:
        get:
            summary: Returns the leaderboard of the beatmap's specified version
            tags:
                - Leaderboards
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/VersionNumber"
            responses:
                200:
                    description: Successfully retrieved leaderboard

    /scores:
        get:
            summary: Returns a filterable list of scores
            tags:
                - Scores
            parameters:
                - $ref: "#/components/parameters/Filter"
                - $ref: "#/components/parameters/UserIdQuery"
                - $ref: "#/components/parameters/BeatmapIdQuery"
                - $ref: "#/components/parameters/BeatmapsetIdQuery"
                - $ref: "#/components/parameters/Accuracy"
                - $ref: "#/components/parameters/CreatedAt"
                - $ref: "#/components/parameters/MaxCombo"
                - $ref: "#/components/parameters/Mode"
                - $ref: "#/components/parameters/ModeInt"
                - $ref: "#/components/parameters/Mods"
                - $ref: "#/components/parameters/Perfect"
                - $ref: "#/components/parameters/PP"
                - $ref: "#/components/parameters/Rank"
                - $ref: "#/components/parameters/Score"
                - $ref: "#/components/parameters/Count300"
                - $ref: "#/components/parameters/Count100"
                - $ref: "#/components/parameters/Count50"
                - $ref: "#/components/parameters/CountGeki"
                - $ref: "#/components/parameters/CountKatsu"
                - $ref: "#/components/parameters/CountMiss"
                - $ref: "#/components/parameters/Type"
            responses:
                200:
                    description: Successfully retrieved scores

        post:
            summary: Adds a score to the latest version of the appropriate beatmap's leaderboard
            tags:
                - Scores
            security:
                - ApiKeyAuth: []
            requestBody:
                $ref: "#/components/requestBodies/Score"
            responses:
                201:
                    description: Successfully added score

    /scores/{beatmap_id}/versions/{version_number}:
        post:
            summary: Adds a score to the specified beatmap version's leaderboard
            tags:
                - Scores
            security:
                - ApiKeyAuth: []
            parameters:
                - $ref: "#/components/parameters/BeatmapId"
                - $ref: "#/components/parameters/VersionNumber"
            requestBody:
                $ref: "#/components/requestBodies/Score"
            responses:
                201:
                    description: Successfully added score